var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/classes/DMEToken.html",[0,0.415,1,1]],["body/classes/DMEToken.html",[0,0.629,1,1.34,2,1.475,3,0.994,4,0.994,5,0.664,6,1.833,7,1.207,8,1.988,9,2.166,10,0.664,11,2.471,12,2.589,13,3.624,14,3.624,15,2.471,16,1.261,17,2.307,18,0.078,19,2.166,20,1.745,21,2.376,22,2.471,23,2.471,24,1.988,25,2.376,26,1.988,27,1.628,28,1.971,29,2.471,30,1.988,31,3.203,32,2.376,33,2.376,34,2.376,35,2.376,36,1.988,37,1.34,38,1.988,39,1.628,40,1.628,41,2.376,42,2.376,43,2.376,44,2.376,45,0.994,46,1.833,47,0.994,48,1.628,49,3.203,50,3.203,51,2.471,52,0.039,53,0.052,54,0.039]],["title/classes/FunctionResult.html",[0,0.415,55,1.215]],["body/classes/FunctionResult.html",[0,0.563,2,1.501,3,1.012,4,1.012,5,0.676,7,1.229,8,1.501,10,1.022,11,2.5,12,2.602,15,2.5,16,1.092,18,0.078,20,1.754,27,2.299,36,2.012,37,1.356,38,2.012,39,1.647,40,1.647,47,1.012,48,1.647,51,2.5,52,0.073,53,0.053,54,0.039,55,1.647,56,3.303,57,1.866,58,1.866,59,2.528,60,2.269,61,2.269,62,3.657,63,3.657,64,4.283,65,2.419,66,3.242,67,3.242,68,2.419,69,2.012,70,2.419,71,2.419,72,2.419,73,2.419,74,2.419,75,2.419,76,2.419,77,2.419,78,3.242,79,3.242]],["title/components/MathExpStringEvalComponent.html",[80,1,81,1]],["body/components/MathExpStringEvalComponent.html",[0,0.475,3,1.145,4,1.145,5,0.765,10,0.765,18,0.077,20,1.471,37,1.471,39,1.391,40,1.391,45,1.145,47,1.145,52,0.045,53,0.057,54,0.045,80,1.625,81,1.715,82,2.712,83,2.737,84,2.737,85,1.974,86,1.815,87,1.815,88,2.111,89,3.516,90,3.884,91,2.737,92,2.996,93,2.996,94,2.411,95,2.996,96,2.182,97,4.099,98,2.411,99,2.737,100,2.737,101,1.391,102,2.737,103,2.737,104,1.699,105,3.516,106,3.516,107,2.737,108,4.099,109,2.737,110,2.737,111,2.737]],["title/modules/MathExpStringEvalModule.html",[112,1.215,113,1.215]],["body/modules/MathExpStringEvalModule.html",[0,0.521,3,1.256,4,1.256,5,0.839,18,0.076,45,1.559,47,1.256,52,0.049,53,0.061,54,0.049,81,1.952,85,1.526,86,1.559,87,1.559,94,1.864,101,1.526,104,1.864,112,1.526,113,2.289,114,1.864,115,1.526,116,2.06,117,1.864,118,1.864,119,3.127,120,2.316,121,2.316,122,2.316,123,2.875,124,2.316,125,1.864,126,3.003,127,2.875,128,3.003,129,2.316]],["title/injectables/MathExpStringEvalService.html",[130,1.215,131,1.215]],["body/injectables/MathExpStringEvalService.html",[0,0.142,1,1.816,3,0.342,4,0.342,5,0.229,7,1.762,8,0.871,9,1.803,10,1.046,12,2.033,16,1.03,17,1.109,18,0.078,19,0.416,20,1.514,22,1.684,26,0.871,27,2.231,28,2.225,29,1.082,30,1.779,36,2.152,37,1.588,38,2.152,39,2.159,40,0.416,45,1.027,46,0.631,47,0.342,48,1.362,52,0.063,53,0.023,54,0.03,55,0.936,58,1.082,59,2.323,60,0.871,61,2.659,69,1.355,85,1.84,86,1.644,87,1.811,96,0.871,98,1.143,101,0.416,116,0.713,130,0.713,131,0.713,132,0.819,133,0.631,134,3.89,135,1.842,136,1.842,137,1.842,138,1.403,139,1.842,140,1.842,141,1.403,142,1.403,143,1.403,144,1.403,145,1.403,146,1.403,147,0.819,148,0.819,149,3.62,150,0.819,151,2.21,152,2.067,153,1.895,154,2.323,155,2.183,156,0.819,157,1.684,158,2.68,159,0.819,160,1.403,161,1.082,162,1.403,163,1.842,164,1.082,165,0.819,166,0.819,167,1.684,168,2.183,169,1.082,170,0.819,171,1.403,172,0.819,173,0.819,174,1.355,175,0.819,176,1.421,177,0.819,178,0.819,179,2.68,180,1.403,181,1.403,182,0.819,183,0.819,184,1.421,185,1.403,186,0.819,187,0.819,188,1.403,189,0.871,190,0.819,191,1.842,192,1.895,193,0.819,194,0.819,195,0.819,196,0.819,197,0.819,198,1.403,199,1.403,200,0.819,201,1.403,202,0.819,203,0.819,204,1.842,205,1.403,206,1.525,207,1.082,208,1.403,209,1.403,210,1.403,211,0.819,212,0.819,213,1.403,214,0.819,215,0.819,216,0.819,217,2.456,218,0.819,219,0.819,220,1.421,221,0.631,222,0.819,223,0.631,224,0.871,225,1.403,226,0.819,227,0.819,228,0.819,229,0.819,230,1.403,231,0.631,232,0.508,233,0.508,234,0.508,235,0.508,236,0.819,237,0.819,238,0.631,239,3.023,240,1.525,241,0.819,242,1.842,243,0.819,244,0.819,245,0.819,246,2.183,247,0.819,248,1.403,249,2.68,250,1.403,251,0.819,252,0.819,253,0.819,254,1.082,255,1.082,256,1.403,257,0.819,258,0.819,259,0.508,260,0.819,261,0.819,262,0.819,263,0.819,264,0.819,265,1.842,266,0.819,267,0.819,268,0.819,269,0.819,270,0.819,271,0.819,272,0.416,273,1.403,274,0.819,275,0.819,276,0.819,277,1.684,278,2.183,279,1.403,280,1.403,281,1.403,282,0.819,283,0.819,284,0.819,285,0.819,286,0.819,287,0.819,288,2.183,289,2.183,290,2.183,291,0.819,292,0.819,293,0.819,294,0.819,295,0.819,296,0.631,297,0.819]],["title/coverage.html",[298,2.481]],["body/coverage.html",[0,0.652,1,1.27,5,0.849,6,2.342,16,0.849,18,0.075,52,0.049,53,0.061,54,0.049,55,1.543,56,2.342,57,2.342,80,1.27,81,1.27,85,1.907,86,1.57,87,1.57,88,2.342,130,1.543,131,1.543,133,2.342,224,1.885,232,1.885,233,1.885,234,1.885,235,1.885,240,1.885,277,2.342,298,2.342,299,1.885,300,3.037,301,2.342,302,4.455,303,3.754,304,3.037,305,3.037,306,3.037,307,3.283,308,4.256,309,4.256,310,3.037]],["title/dependencies.html",[115,1.455,311,1.558]],["body/dependencies.html",[18,0.073,52,0.058,53,0.068,54,0.058,101,1.825,115,2.109,312,3.592,313,3.592,314,3.201]],["title/miscellaneous/enumerations.html",[315,1.027,316,2.209]],["body/miscellaneous/enumerations.html",[10,0.968,16,0.968,18,0.066,19,2.065,24,2.151,28,1.761,52,0.056,53,0.066,54,0.056,315,1.761,316,2.673,317,3.465,318,4.064,319,3.465,320,3.465,321,2.151,322,2.673,323,2.151,324,2.151,325,2.151,326,2.673,327,2.673]],["title/index.html",[10,0.565,328,1.558,329,1.558]],["body/index.html",[0,0.219,1,0.528,5,0.562,7,1.021,9,1.685,16,0.927,17,1.45,18,0.076,19,1.021,20,0.841,24,1.247,26,0.784,27,1.582,28,1.021,37,0.841,45,1.757,48,0.642,52,0.021,53,0.033,54,0.033,59,2.058,60,2.366,61,2.415,69,1.933,80,1.51,82,0.974,86,1.704,87,1.771,92,0.974,93,0.974,94,2.495,95,3.101,96,0.784,98,1.247,112,1.834,116,0.642,117,0.784,118,0.784,127,2.2,129,2.2,131,0.642,151,0.974,152,0.974,153,1.55,154,0.784,161,0.974,164,1.55,167,1.55,169,0.974,174,1.553,176,2.2,184,1.55,189,0.784,192,1.55,206,1.247,221,1.55,223,2.402,238,0.974,254,1.55,255,1.55,259,1.247,272,0.642,296,0.974,299,1.771,301,1.55,311,0.974,314,0.974,321,1.247,322,0.974,323,0.784,324,0.784,325,1.247,326,0.974,327,1.55,330,2.01,331,2.853,332,4.162,333,1.263,334,3.892,335,0.974,336,2.402,337,1.263,338,1.263,339,1.263,340,1.263,341,1.263,342,1.263,343,2.503,344,2.853,345,1.263,346,1.263,347,2.503,348,2.01,349,2.01,350,2.01,351,1.263,352,1.263,353,2.01,354,1.263,355,2.853,356,2.01,357,2.01,358,1.263,359,2.01,360,2.503,361,1.263,362,1.263,363,1.263,364,2.853,365,1.263,366,2.853,367,1.263,368,3.317,369,2.01,370,3.61,371,2.503,372,2.503,373,1.263,374,1.263,375,2.01,376,1.263,377,0.974,378,2.01,379,1.263,380,1.263,381,2.853,382,1.263,383,2.853,384,1.263,385,2.853,386,3.61,387,1.263,388,2.853,389,3.317,390,0.974,391,1.263,392,1.263,393,2.503,394,1.263,395,2.853,396,1.263,397,1.263,398,2.503,399,1.263,400,1.263,401,2.01,402,1.263,403,2.01,404,1.263,405,1.263,406,1.263,407,1.263,408,1.263,409,2.01,410,1.263,411,2.01,412,0.974,413,1.263,414,1.263,415,0.974,416,1.263,417,1.263,418,1.263,419,0.974,420,1.263,421,0.974,422,1.263,423,1.263,424,1.263,425,1.263,426,1.263,427,0.974,428,2.01,429,1.263,430,2.01,431,1.263,432,1.263,433,1.263,434,1.263,435,1.263,436,1.263,437,3.114,438,1.263,439,1.263,440,1.263,441,2.01,442,2.01,443,1.263,444,1.263,445,1.263,446,1.263,447,2.503,448,0.784,449,1.263,450,1.263,451,1.263,452,1.263,453,1.263,454,1.263,455,1.263,456,1.263,457,1.263,458,1.263,459,0.974,460,1.263,461,2.503,462,2.503,463,2.01,464,1.263,465,1.263,466,2.01,467,1.263,468,1.263,469,1.263,470,1.263,471,1.263,472,1.263,473,1.263,474,1.263,475,1.263]],["title/license.html",[328,1.558,329,1.558,476,1.558]],["body/license.html",[18,0.058,52,0.046,53,0.058,54,0.046,125,1.743,231,2.166,259,1.743,299,1.743,336,2.757,377,3.032,390,2.757,412,2.166,419,2.166,427,2.166,459,2.166,476,2.166,477,2.808,478,3.931,479,2.808,480,2.808,481,2.808,482,2.808,483,3.574,484,2.808,485,2.808,486,2.808,487,2.808,488,2.808,489,2.808,490,4.536,491,2.808,492,2.808,493,2.808,494,2.808,495,3.574,496,2.808,497,2.808,498,2.808,499,2.808,500,2.808,501,2.808,502,2.808,503,2.808,504,2.808,505,3.574,506,2.808,507,2.808,508,2.808,509,2.808,510,2.808,511,3.574,512,3.574,513,2.808,514,2.808,515,2.808,516,2.808,517,2.808,518,2.808,519,2.808,520,2.808,521,2.808,522,2.808,523,2.808,524,2.808,525,2.808,526,2.808,527,2.808,528,2.808,529,2.808,530,2.808,531,2.808,532,2.808,533,2.808,534,2.808,535,2.808,536,2.808,537,2.808,538,2.808]],["title/modules.html",[114,1.997]],["body/modules.html",[18,0.068,52,0.059,53,0.068,54,0.059,113,1.843,114,2.252,539,3.628,540,3.628,541,3.628,542,3.628]],["title/overview.html",[543,2.481]],["body/overview.html",[2,2.04,18,0.071,52,0.054,53,0.064,54,0.054,80,1.375,81,1.92,104,2.04,112,2.001,113,2.272,115,1.67,116,1.67,117,2.04,118,2.04,119,2.535,120,2.535,121,2.535,122,2.535,123,3.038,124,2.535,125,2.04,130,1.67,272,2.143,448,2.04,543,2.535]],["title/miscellaneous/variables.html",[315,1.027,544,2.209]],["body/miscellaneous/variables.html",[9,1.149,10,1.176,16,1.062,17,2.089,18,0.078,23,1.745,30,2.193,52,0.037,53,0.05,54,0.037,154,1.404,157,1.745,174,2.193,189,1.404,206,1.404,207,2.725,220,1.745,224,2.359,232,1.923,233,1.923,234,1.923,235,1.923,240,2.873,272,2.178,307,1.745,315,1.149,321,1.404,323,1.404,324,1.404,325,1.404,335,1.745,415,2.389,421,1.745,448,2.551,544,1.745,545,3.8,546,3.8,547,4.286,548,3.8,549,3.533,550,3.8,551,3.8,552,2.262,553,3.533,554,3.098,555,2.262,556,3.098,557,2.262,558,2.262,559,2.262,560,2.262,561,2.262,562,3.533,563,2.262,564,2.262,565,2.262,566,2.262,567,2.262,568,2.262,569,2.262,570,2.262,571,2.262,572,2.262,573,2.262]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"classes/DMEToken.html":{},"classes/FunctionResult.html":{},"components/MathExpStringEvalComponent.html":{},"modules/MathExpStringEvalModule.html":{},"injectables/MathExpStringEvalService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":240,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0/3",{"_index":304,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":272,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1/1",{"_index":309,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":302,"title":{},"body":{"coverage.html":{}}}],["12/14",{"_index":306,"title":{},"body":{"coverage.html":{}}}],["1].value",{"_index":267,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["2",{"_index":448,"title":{},"body":{"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["2019",{"_index":480,"title":{},"body":{"license.html":{}}}],["3",{"_index":547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3/3",{"_index":303,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5",{"_index":549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6",{"_index":550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7",{"_index":551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7.2.0",{"_index":314,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["8",{"_index":552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["85",{"_index":305,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9_",{"_index":569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_endindex",{"_index":62,"title":{},"body":{"classes/FunctionResult.html":{}}}],["_result",{"_index":63,"title":{},"body":{"classes/FunctionResult.html":{}}}],["_type",{"_index":13,"title":{},"body":{"classes/DMEToken.html":{}}}],["_value",{"_index":14,"title":{},"body":{"classes/DMEToken.html":{}}}],["a.value",{"_index":289,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["above",{"_index":459,"title":{},"body":{"index.html":{},"license.html":{}}}],["accessors",{"_index":15,"title":{},"body":{"classes/DMEToken.html":{},"classes/FunctionResult.html":{}}}],["accrodingly",{"_index":406,"title":{},"body":{"index.html":{}}}],["action",{"_index":533,"title":{},"body":{"license.html":{}}}],["actual_component",{"_index":111,"title":{},"body":{"components/MathExpStringEvalComponent.html":{}}}],["add",{"_index":388,"title":{},"body":{"index.html":{}}}],["already",{"_index":191,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["and/or",{"_index":503,"title":{},"body":{"license.html":{}}}],["angular",{"_index":331,"title":{},"body":{"index.html":{}}}],["angular/common",{"_index":313,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":101,"title":{},"body":{"components/MathExpStringEvalComponent.html":{},"modules/MathExpStringEvalModule.html":{},"injectables/MathExpStringEvalService.html":{},"dependencies.html":{}}}],["another",{"_index":222,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["api",{"_index":350,"title":{},"body":{"index.html":{}}}],["app",{"_index":437,"title":{},"body":{"index.html":{}}}],["app.component.css",{"_index":456,"title":{},"body":{"index.html":{}}}],["app.component.html",{"_index":454,"title":{},"body":{"index.html":{}}}],["app.component.ts",{"_index":466,"title":{},"body":{"index.html":{}}}],["app.modeul.ts",{"_index":369,"title":{},"body":{"index.html":{}}}],["app.module.ts",{"_index":395,"title":{},"body":{"index.html":{}}}],["appcomponent",{"_index":442,"title":{},"body":{"index.html":{}}}],["application",{"_index":389,"title":{},"body":{"index.html":{}}}],["application's",{"_index":392,"title":{},"body":{"index.html":{}}}],["applications",{"_index":363,"title":{},"body":{"index.html":{}}}],["argument",{"_index":467,"title":{},"body":{"index.html":{}}}],["arising",{"_index":536,"title":{},"body":{"license.html":{}}}],["arithmetic",{"_index":162,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["array",{"_index":206,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["associated",{"_index":491,"title":{},"body":{"license.html":{}}}],["authors",{"_index":526,"title":{},"body":{"license.html":{}}}],["b",{"_index":158,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["b.type==tokentype.operand",{"_index":287,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["b.value",{"_index":290,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["binomial",{"_index":160,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["boolean",{"_index":227,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["bootstrap",{"_index":117,"title":{},"body":{"modules/MathExpStringEvalModule.html":{},"index.html":{},"overview.html":{}}}],["browse",{"_index":542,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":539,"title":{},"body":{"modules.html":{}}}],["browsermodule",{"_index":443,"title":{},"body":{"index.html":{}}}],["build",{"_index":381,"title":{},"body":{"index.html":{}}}],["built",{"_index":337,"title":{},"body":{"index.html":{}}}],["c",{"_index":479,"title":{},"body":{"license.html":{}}}],["calls",{"_index":181,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["case",{"_index":393,"title":{},"body":{"index.html":{}}}],["catch(e",{"_index":248,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["changes",{"_index":405,"title":{},"body":{"index.html":{}}}],["character",{"_index":30,"title":{},"body":{"classes/DMEToken.html":{},"injectables/MathExpStringEvalService.html":{},"miscellaneous/variables.html":{}}}],["characters",{"_index":207,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"miscellaneous/variables.html":{}}}],["charge",{"_index":487,"title":{},"body":{"license.html":{}}}],["check",{"_index":241,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["claim",{"_index":529,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/DMEToken.html":{},"classes/FunctionResult.html":{}},"body":{"classes/DMEToken.html":{},"classes/FunctionResult.html":{},"components/MathExpStringEvalComponent.html":{},"modules/MathExpStringEvalModule.html":{},"injectables/MathExpStringEvalService.html":{},"coverage.html":{},"index.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/DMEToken.html":{},"classes/FunctionResult.html":{},"overview.html":{}}}],["cli",{"_index":340,"title":{},"body":{"index.html":{}}}],["cli's",{"_index":475,"title":{},"body":{"index.html":{}}}],["cloned",{"_index":374,"title":{},"body":{"index.html":{}}}],["closeparenthesis",{"_index":324,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["closing",{"_index":408,"title":{},"body":{"index.html":{}}}],["cluster_mathexpstringevalmodule",{"_index":120,"title":{},"body":{"modules/MathExpStringEvalModule.html":{},"overview.html":{}}}],["cluster_mathexpstringevalmodule_declarations",{"_index":121,"title":{},"body":{"modules/MathExpStringEvalModule.html":{},"overview.html":{}}}],["cluster_mathexpstringevalmodule_exports",{"_index":122,"title":{},"body":{"modules/MathExpStringEvalModule.html":{},"overview.html":{}}}],["code",{"_index":344,"title":{},"body":{"index.html":{}}}],["comma",{"_index":327,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["compodoc",{"_index":359,"title":{},"body":{"index.html":{}}}],["component",{"_index":80,"title":{"components/MathExpStringEvalComponent.html":{}},"body":{"components/MathExpStringEvalComponent.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["component_template",{"_index":109,"title":{},"body":{"components/MathExpStringEvalComponent.html":{}}}],["components",{"_index":82,"title":{},"body":{"components/MathExpStringEvalComponent.html":{},"index.html":{}}}],["conditions",{"_index":510,"title":{},"body":{"license.html":{}}}],["configuration",{"_index":396,"title":{},"body":{"index.html":{}}}],["configured",{"_index":445,"title":{},"body":{"index.html":{}}}],["configuring",{"_index":436,"title":{},"body":{"index.html":{}}}],["connection",{"_index":537,"title":{},"body":{"license.html":{}}}],["console",{"_index":465,"title":{},"body":{"index.html":{}}}],["constructor",{"_index":98,"title":{},"body":{"components/MathExpStringEvalComponent.html":{},"injectables/MathExpStringEvalService.html":{},"index.html":{}}}],["constructor(private",{"_index":457,"title":{},"body":{"index.html":{}}}],["containing",{"_index":179,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["contains",{"_index":26,"title":{},"body":{"classes/DMEToken.html":{},"injectables/MathExpStringEvalService.html":{},"index.html":{}}}],["contract",{"_index":534,"title":{},"body":{"license.html":{}}}],["converts",{"_index":195,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["copies",{"_index":505,"title":{},"body":{"license.html":{}}}],["copy",{"_index":390,"title":{},"body":{"index.html":{},"license.html":{}}}],["copyright",{"_index":478,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":298,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":394,"title":{},"body":{"index.html":{}}}],["current",{"_index":217,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["d",{"_index":351,"title":{},"body":{"index.html":{}}}],["damages",{"_index":530,"title":{},"body":{"license.html":{}}}],["dame",{"_index":481,"title":{},"body":{"license.html":{}}}],["deal",{"_index":493,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":538,"title":{},"body":{"license.html":{}}}],["decimal",{"_index":280,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["decimalpoint",{"_index":325,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["declarations",{"_index":116,"title":{},"body":{"modules/MathExpStringEvalModule.html":{},"injectables/MathExpStringEvalService.html":{},"index.html":{},"overview.html":{}}}],["decorator",{"_index":398,"title":{},"body":{"index.html":{}}}],["default",{"_index":546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":20,"title":{},"body":{"classes/DMEToken.html":{},"classes/FunctionResult.html":{},"components/MathExpStringEvalComponent.html":{},"injectables/MathExpStringEvalService.html":{},"index.html":{}}}],["demo",{"_index":461,"title":{},"body":{"index.html":{}}}],["demonstrate",{"_index":471,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":115,"title":{"dependencies.html":{}},"body":{"modules/MathExpStringEvalModule.html":{},"dependencies.html":{},"overview.html":{}}}],["depending",{"_index":352,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/DMEToken.html":{},"classes/FunctionResult.html":{},"injectables/MathExpStringEvalService.html":{},"index.html":{}}}],["developer",{"_index":464,"title":{},"body":{"index.html":{}}}],["different",{"_index":571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["digit",{"_index":213,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["directive",{"_index":107,"title":{},"body":{"components/MathExpStringEvalComponent.html":{}}}],["directives",{"_index":110,"title":{},"body":{"components/MathExpStringEvalComponent.html":{}}}],["directory",{"_index":386,"title":{},"body":{"index.html":{}}}],["dist",{"_index":385,"title":{},"body":{"index.html":{}}}],["dist/math",{"_index":391,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":501,"title":{},"body":{"license.html":{}}}],["divides",{"_index":292,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["dl",{"_index":93,"title":{},"body":{"components/MathExpStringEvalComponent.html":{},"index.html":{}}}],["dmetoken",{"_index":1,"title":{"classes/DMEToken.html":{}},"body":{"classes/DMEToken.html":{},"injectables/MathExpStringEvalService.html":{},"coverage.html":{},"index.html":{}}}],["doc/index.html",{"_index":358,"title":{},"body":{"index.html":{}}}],["document",{"_index":346,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":299,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["dom",{"_index":83,"title":{},"body":{"components/MathExpStringEvalComponent.html":{}}}],["e",{"_index":250,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["elaborated",{"_index":345,"title":{},"body":{"index.html":{}}}],["element",{"_index":106,"title":{},"body":{"components/MathExpStringEvalComponent.html":{}}}],["endindex",{"_index":64,"title":{},"body":{"classes/FunctionResult.html":{}}}],["ending",{"_index":66,"title":{},"body":{"classes/FunctionResult.html":{}}}],["entity",{"_index":417,"title":{},"body":{"index.html":{}}}],["enum",{"_index":24,"title":{},"body":{"classes/DMEToken.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["enumerations",{"_index":316,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error('error",{"_index":278,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["eval",{"_index":95,"title":{},"body":{"components/MathExpStringEvalComponent.html":{},"index.html":{}}}],["eval.component",{"_index":128,"title":{},"body":{"modules/MathExpStringEvalModule.html":{}}}],["eval.component.ts",{"_index":88,"title":{},"body":{"components/MathExpStringEvalComponent.html":{},"coverage.html":{}}}],["eval.component.ts:12",{"_index":100,"title":{},"body":{"components/MathExpStringEvalComponent.html":{}}}],["eval.component.ts:8",{"_index":99,"title":{},"body":{"components/MathExpStringEvalComponent.html":{}}}],["eval.module.ts",{"_index":126,"title":{},"body":{"modules/MathExpStringEvalModule.html":{}}}],["eval.service.ts",{"_index":133,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"coverage.html":{}}}],["eval.service.ts:10",{"_index":147,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["eval.service.ts:133",{"_index":215,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["eval.service.ts:19",{"_index":166,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["eval.service.ts:223",{"_index":218,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["eval.service.ts:246",{"_index":212,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["eval.service.ts:287",{"_index":203,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["eval.service.ts:305",{"_index":187,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["eval.service.ts:344",{"_index":159,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["eval.service.ts:375",{"_index":178,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["eval.service.ts:413",{"_index":172,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["eval.service.ts:42",{"_index":150,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["eval.service.ts:531",{"_index":194,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["eval.service.ts:71",{"_index":183,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["eval/src/public",{"_index":349,"title":{},"body":{"index.html":{}}}],["evalautetokenizedexp",{"_index":135,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["evalautetokenizedexp(tokens",{"_index":148,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["evaluate",{"_index":168,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["evaluatebinaryexpression",{"_index":136,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["evaluatebinaryexpression(a",{"_index":156,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["evaluated",{"_index":153,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"index.html":{}}}],["evaluateexp",{"_index":137,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["evaluateexp(exp",{"_index":165,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["evaluatefunctiontoken",{"_index":138,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["evaluatefunctiontoken(tokens",{"_index":170,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["evaluatefunctiontokens",{"_index":139,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["evaluatefunctiontokens(tokens",{"_index":177,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["evaluatenativeexpression",{"_index":140,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["evaluatenativeexpression(tokens",{"_index":182,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["evaluates",{"_index":151,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"index.html":{}}}],["evaluateunaryoperations",{"_index":141,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["evaluateunaryoperations(tokens",{"_index":186,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["evaluating",{"_index":69,"title":{},"body":{"classes/FunctionResult.html":{},"injectables/MathExpStringEvalService.html":{},"index.html":{}}}],["evaluation",{"_index":58,"title":{},"body":{"classes/FunctionResult.html":{},"injectables/MathExpStringEvalService.html":{}}}],["evaluator",{"_index":330,"title":{},"body":{"index.html":{}}}],["event",{"_index":525,"title":{},"body":{"license.html":{}}}],["exception",{"_index":293,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["existing",{"_index":414,"title":{},"body":{"index.html":{}}}],["exp",{"_index":86,"title":{},"body":{"components/MathExpStringEvalComponent.html":{},"modules/MathExpStringEvalModule.html":{},"injectables/MathExpStringEvalService.html":{},"coverage.html":{},"index.html":{}}}],["exp.length==0",{"_index":245,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["exp.split",{"_index":271,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["exp==null",{"_index":243,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["exp==undefined",{"_index":244,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["exp[index].match(regex.num",{"_index":276,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["expmathstringevalmodule",{"_index":370,"title":{},"body":{"index.html":{}}}],["expmathstringevalservice",{"_index":372,"title":{},"body":{"index.html":{}}}],["export",{"_index":47,"title":{},"body":{"classes/DMEToken.html":{},"classes/FunctionResult.html":{},"components/MathExpStringEvalComponent.html":{},"modules/MathExpStringEvalModule.html":{},"injectables/MathExpStringEvalService.html":{}}}],["exports",{"_index":119,"title":{},"body":{"modules/MathExpStringEvalModule.html":{},"overview.html":{}}}],["express",{"_index":517,"title":{},"body":{"license.html":{}}}],["expression",{"_index":61,"title":{},"body":{"classes/FunctionResult.html":{},"injectables/MathExpStringEvalService.html":{},"index.html":{}}}],["expressions",{"_index":335,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["f1.f2...fn(param1",{"_index":432,"title":{},"body":{"index.html":{}}}],["false",{"_index":230,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["field",{"_index":424,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/DMEToken.html":{},"classes/FunctionResult.html":{},"components/MathExpStringEvalComponent.html":{},"modules/MathExpStringEvalModule.html":{},"injectables/MathExpStringEvalService.html":{},"coverage.html":{},"index.html":{}}}],["files",{"_index":492,"title":{},"body":{"license.html":{}}}],["final",{"_index":413,"title":{},"body":{"index.html":{}}}],["finally",{"_index":468,"title":{},"body":{"index.html":{}}}],["first",{"_index":161,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"index.html":{}}}],["fitness",{"_index":522,"title":{},"body":{"license.html":{}}}],["following",{"_index":259,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"index.html":{},"license.html":{}}}],["for(++index",{"_index":297,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["for(i=0",{"_index":294,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["form",{"_index":431,"title":{},"body":{"index.html":{}}}],["free",{"_index":486,"title":{},"body":{"license.html":{}}}],["function",{"_index":59,"title":{},"body":{"classes/FunctionResult.html":{},"injectables/MathExpStringEvalService.html":{},"index.html":{}}}],["functiondb",{"_index":149,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["functionname",{"_index":326,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["functionnamestart",{"_index":565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["functionresult",{"_index":55,"title":{"classes/FunctionResult.html":{}},"body":{"classes/FunctionResult.html":{},"injectables/MathExpStringEvalService.html":{},"coverage.html":{}}}],["functions",{"_index":176,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"index.html":{}}}],["funtionname",{"_index":567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["furnished",{"_index":508,"title":{},"body":{"license.html":{}}}],["generate",{"_index":384,"title":{},"body":{"index.html":{}}}],["generated",{"_index":192,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"index.html":{}}}],["generates",{"_index":204,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["generating",{"_index":362,"title":{},"body":{"index.html":{}}}],["getendindex",{"_index":70,"title":{},"body":{"classes/FunctionResult.html":{}}}],["getresult",{"_index":74,"title":{},"body":{"classes/FunctionResult.html":{}}}],["getting",{"_index":328,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettype",{"_index":32,"title":{},"body":{"classes/DMEToken.html":{}}}],["getvalue",{"_index":41,"title":{},"body":{"classes/DMEToken.html":{}}}],["granted",{"_index":485,"title":{},"body":{"license.html":{}}}],["greater",{"_index":559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hereby",{"_index":484,"title":{},"body":{"license.html":{}}}],["higher",{"_index":560,"title":{},"body":{"miscellaneous/variables.html":{}}}],["holders",{"_index":527,"title":{},"body":{"license.html":{}}}],["html",{"_index":105,"title":{},"body":{"components/MathExpStringEvalComponent.html":{}}}],["i:number=0",{"_index":265,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["i=exp.length",{"_index":275,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["identifier",{"_index":300,"title":{},"body":{"coverage.html":{}}}],["if(a.type==tokentype.operand",{"_index":285,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["if(b.value==0",{"_index":291,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["if(op.value",{"_index":288,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["if(tokens==undefined",{"_index":251,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["if(tokens[index].type!=tokentype.openparenthesis",{"_index":295,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["implements",{"_index":89,"title":{},"body":{"components/MathExpStringEvalComponent.html":{}}}],["implied",{"_index":518,"title":{},"body":{"license.html":{}}}],["import",{"_index":45,"title":{},"body":{"classes/DMEToken.html":{},"components/MathExpStringEvalComponent.html":{},"modules/MathExpStringEvalModule.html":{},"injectables/MathExpStringEvalService.html":{},"index.html":{}}}],["imports",{"_index":129,"title":{},"body":{"modules/MathExpStringEvalModule.html":{},"index.html":{}}}],["include",{"_index":347,"title":{},"body":{"index.html":{}}}],["included",{"_index":412,"title":{},"body":{"index.html":{},"license.html":{}}}],["including",{"_index":495,"title":{},"body":{"license.html":{}}}],["independent",{"_index":416,"title":{},"body":{"index.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/DMEToken.html":{},"classes/FunctionResult.html":{},"components/MathExpStringEvalComponent.html":{},"injectables/MathExpStringEvalService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["indextable",{"_index":232,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["indicate",{"_index":555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["indicates",{"_index":22,"title":{},"body":{"classes/DMEToken.html":{},"injectables/MathExpStringEvalService.html":{}}}],["individual",{"_index":422,"title":{},"body":{"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/DMEToken.html":{},"classes/FunctionResult.html":{},"components/MathExpStringEvalComponent.html":{},"modules/MathExpStringEvalModule.html":{},"injectables/MathExpStringEvalService.html":{}}}],["injectable",{"_index":130,"title":{"injectables/MathExpStringEvalService.html":{}},"body":{"injectables/MathExpStringEvalService.html":{},"coverage.html":{},"overview.html":{}}}],["injectables",{"_index":132,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["injected",{"_index":447,"title":{},"body":{"index.html":{}}}],["injecting",{"_index":452,"title":{},"body":{"index.html":{}}}],["injection",{"_index":449,"title":{},"body":{"index.html":{}}}],["injects",{"_index":460,"title":{},"body":{"index.html":{}}}],["inside",{"_index":440,"title":{},"body":{"index.html":{}}}],["install",{"_index":365,"title":{},"body":{"index.html":{}}}],["installation",{"_index":355,"title":{},"body":{"index.html":{}}}],["installed",{"_index":353,"title":{},"body":{"index.html":{}}}],["int",{"_index":397,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":279,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["invocation",{"_index":469,"title":{},"body":{"index.html":{}}}],["itself",{"_index":31,"title":{},"body":{"classes/DMEToken.html":{}}}],["javascript",{"_index":338,"title":{},"body":{"index.html":{}}}],["js's",{"_index":474,"title":{},"body":{"index.html":{}}}],["json",{"_index":173,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["keys",{"_index":554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kind",{"_index":516,"title":{},"body":{"license.html":{}}}],["last",{"_index":210,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["legal",{"_index":573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["legend",{"_index":104,"title":{},"body":{"components/MathExpStringEvalComponent.html":{},"modules/MathExpStringEvalModule.html":{},"overview.html":{}}}],["liability",{"_index":531,"title":{},"body":{"license.html":{}}}],["liable",{"_index":528,"title":{},"body":{"license.html":{}}}],["library",{"_index":332,"title":{},"body":{"index.html":{}}}],["license",{"_index":476,"title":{"license.html":{}},"body":{"license.html":{}}}],["limitation",{"_index":496,"title":{},"body":{"license.html":{}}}],["limited",{"_index":519,"title":{},"body":{"license.html":{}}}],["line",{"_index":399,"title":{},"body":{"index.html":{}}}],["list",{"_index":154,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["look",{"_index":441,"title":{},"body":{"index.html":{}}}],["lyngdoh",{"_index":482,"title":{},"body":{"license.html":{}}}],["main",{"_index":67,"title":{},"body":{"classes/FunctionResult.html":{}}}],["make",{"_index":404,"title":{},"body":{"index.html":{}}}],["manager",{"_index":380,"title":{},"body":{"index.html":{}}}],["manual",{"_index":373,"title":{},"body":{"index.html":{}}}],["manually",{"_index":387,"title":{},"body":{"index.html":{}}}],["matching",{"_index":53,"title":{},"body":{"classes/DMEToken.html":{},"classes/FunctionResult.html":{},"components/MathExpStringEvalComponent.html":{},"modules/MathExpStringEvalModule.html":{},"injectables/MathExpStringEvalService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["math",{"_index":94,"title":{},"body":{"components/MathExpStringEvalComponent.html":{},"modules/MathExpStringEvalModule.html":{},"index.html":{}}}],["math.sin",{"_index":470,"title":{},"body":{"index.html":{}}}],["mathematical",{"_index":169,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"index.html":{}}}],["mathexpstringevalcomponent",{"_index":81,"title":{"components/MathExpStringEvalComponent.html":{}},"body":{"components/MathExpStringEvalComponent.html":{},"modules/MathExpStringEvalModule.html":{},"coverage.html":{},"overview.html":{}}}],["mathexpstringevalmodule",{"_index":113,"title":{"modules/MathExpStringEvalModule.html":{}},"body":{"modules/MathExpStringEvalModule.html":{},"modules.html":{},"overview.html":{}}}],["mathexpstringevalservice",{"_index":131,"title":{"injectables/MathExpStringEvalService.html":{}},"body":{"injectables/MathExpStringEvalService.html":{},"coverage.html":{},"index.html":{}}}],["merchantability",{"_index":521,"title":{},"body":{"license.html":{}}}],["merge",{"_index":499,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":91,"title":{},"body":{"components/MathExpStringEvalComponent.html":{}}}],["method",{"_index":167,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"index.html":{}}}],["methods",{"_index":96,"title":{},"body":{"components/MathExpStringEvalComponent.html":{},"injectables/MathExpStringEvalService.html":{},"index.html":{}}}],["minus",{"_index":198,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["miscellaneous",{"_index":315,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":477,"title":{},"body":{"license.html":{}}}],["modify",{"_index":498,"title":{},"body":{"license.html":{}}}],["module",{"_index":112,"title":{"modules/MathExpStringEvalModule.html":{}},"body":{"modules/MathExpStringEvalModule.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":114,"title":{"modules.html":{}},"body":{"modules/MathExpStringEvalModule.html":{},"modules.html":{}}}],["more",{"_index":185,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["n",{"_index":409,"title":{},"body":{"index.html":{}}}],["name",{"_index":37,"title":{},"body":{"classes/DMEToken.html":{},"classes/FunctionResult.html":{},"components/MathExpStringEvalComponent.html":{},"injectables/MathExpStringEvalService.html":{},"index.html":{}}}],["named",{"_index":439,"title":{},"body":{"index.html":{}}}],["native",{"_index":184,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"index.html":{}}}],["necessary",{"_index":451,"title":{},"body":{"index.html":{}}}],["negation",{"_index":190,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["negative",{"_index":200,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["new",{"_index":277,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"coverage.html":{}}}],["next",{"_index":411,"title":{},"body":{"index.html":{}}}],["ng",{"_index":383,"title":{},"body":{"index.html":{}}}],["ngmodule",{"_index":127,"title":{},"body":{"modules/MathExpStringEvalModule.html":{},"index.html":{}}}],["ngoninit",{"_index":97,"title":{},"body":{"components/MathExpStringEvalComponent.html":{}}}],["node",{"_index":379,"title":{},"body":{"index.html":{}}}],["node_modules",{"_index":403,"title":{},"body":{"index.html":{}}}],["node_modules/dl",{"_index":371,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":524,"title":{},"body":{"license.html":{}}}],["normalizenegativeoperands",{"_index":142,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["normalizenegativeoperands(tokens",{"_index":193,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["normalizing",{"_index":258,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["note",{"_index":342,"title":{},"body":{"index.html":{}}}],["notice",{"_index":511,"title":{},"body":{"license.html":{}}}],["now",{"_index":446,"title":{},"body":{"index.html":{}}}],["npm",{"_index":364,"title":{},"body":{"index.html":{}}}],["null",{"_index":242,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["num",{"_index":564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number",{"_index":27,"title":{},"body":{"classes/DMEToken.html":{},"classes/FunctionResult.html":{},"injectables/MathExpStringEvalService.html":{},"index.html":{}}}],["numbers",{"_index":201,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["numerical",{"_index":29,"title":{},"body":{"classes/DMEToken.html":{},"injectables/MathExpStringEvalService.html":{}}}],["object",{"_index":174,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["obtained",{"_index":261,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["obtaining",{"_index":489,"title":{},"body":{"license.html":{}}}],["once",{"_index":444,"title":{},"body":{"index.html":{}}}],["one",{"_index":221,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"index.html":{}}}],["oninit",{"_index":90,"title":{},"body":{"components/MathExpStringEvalComponent.html":{}}}],["ooperands",{"_index":196,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["op",{"_index":157,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"miscellaneous/variables.html":{}}}],["op.type==tokentype.operator",{"_index":286,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["open",{"_index":357,"title":{},"body":{"index.html":{}}}],["opening",{"_index":296,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"index.html":{}}}],["openparenthesis",{"_index":323,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["operand",{"_index":322,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["operandstack",{"_index":263,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["operation",{"_index":163,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["operations",{"_index":255,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"index.html":{}}}],["operator",{"_index":321,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["operatorprecedence",{"_index":233,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["operatorprecedence[operatorstack[operatorstack.length",{"_index":266,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["operatorprecedence[tokens[i].value",{"_index":270,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["operators",{"_index":558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["operatorstack",{"_index":264,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["operatorstack.push(tokens[i",{"_index":268,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["optional",{"_index":38,"title":{},"body":{"classes/DMEToken.html":{},"classes/FunctionResult.html":{},"injectables/MathExpStringEvalService.html":{}}}],["original",{"_index":180,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["otherwise",{"_index":231,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"license.html":{}}}],["out",{"_index":125,"title":{},"body":{"modules/MathExpStringEvalModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":543,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":311,"title":{"dependencies.html":{}},"body":{"index.html":{}}}],["param",{"_index":239,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["param2",{"_index":433,"title":{},"body":{"index.html":{}}}],["parameters",{"_index":36,"title":{},"body":{"classes/DMEToken.html":{},"classes/FunctionResult.html":{},"injectables/MathExpStringEvalService.html":{}}}],["paramn",{"_index":434,"title":{},"body":{"index.html":{}}}],["paremeter",{"_index":429,"title":{},"body":{"index.html":{}}}],["parenthesis",{"_index":189,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["parsing",{"_index":282,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["particular",{"_index":523,"title":{},"body":{"license.html":{}}}],["passed",{"_index":428,"title":{},"body":{"index.html":{}}}],["peer",{"_index":312,"title":{},"body":{"dependencies.html":{}}}],["performs",{"_index":473,"title":{},"body":{"index.html":{}}}],["permission",{"_index":483,"title":{},"body":{"license.html":{}}}],["permit",{"_index":506,"title":{},"body":{"license.html":{}}}],["person",{"_index":488,"title":{},"body":{"license.html":{}}}],["persons",{"_index":507,"title":{},"body":{"license.html":{}}}],["point",{"_index":281,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["portions",{"_index":514,"title":{},"body":{"license.html":{}}}],["possible",{"_index":320,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["pre",{"_index":225,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["precedence",{"_index":556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["present",{"_index":401,"title":{},"body":{"index.html":{}}}],["previous",{"_index":226,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["prior",{"_index":209,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["private",{"_index":12,"title":{},"body":{"classes/DMEToken.html":{},"classes/FunctionResult.html":{},"injectables/MathExpStringEvalService.html":{}}}],["processfunctionname",{"_index":143,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["processfunctionname(exp",{"_index":202,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["processnumbers",{"_index":144,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["processnumbers(exp",{"_index":211,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["projects",{"_index":402,"title":{},"body":{"index.html":{}}}],["projects/math",{"_index":348,"title":{},"body":{"index.html":{}}}],["properties",{"_index":11,"title":{},"body":{"classes/DMEToken.html":{},"classes/FunctionResult.html":{}}}],["provided",{"_index":427,"title":{},"body":{"index.html":{},"license.html":{}}}],["providedin",{"_index":237,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["providers",{"_index":118,"title":{},"body":{"modules/MathExpStringEvalModule.html":{},"index.html":{},"overview.html":{}}}],["provides",{"_index":333,"title":{},"body":{"index.html":{}}}],["public",{"_index":134,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["publish",{"_index":500,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":419,"title":{},"body":{"index.html":{},"license.html":{}}}],["pushes",{"_index":205,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["refer",{"_index":354,"title":{},"body":{"index.html":{}}}],["regex",{"_index":234,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["registry",{"_index":236,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["regular",{"_index":570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["repository",{"_index":375,"title":{},"body":{"index.html":{}}}],["represent",{"_index":557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["represented",{"_index":423,"title":{},"body":{"index.html":{}}}],["representing",{"_index":8,"title":{},"body":{"classes/DMEToken.html":{},"classes/FunctionResult.html":{},"injectables/MathExpStringEvalService.html":{}}}],["represents",{"_index":415,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["reset",{"_index":124,"title":{},"body":{"modules/MathExpStringEvalModule.html":{},"overview.html":{}}}],["restriction",{"_index":494,"title":{},"body":{"license.html":{}}}],["result",{"_index":52,"title":{},"body":{"classes/DMEToken.html":{},"classes/FunctionResult.html":{},"components/MathExpStringEvalComponent.html":{},"modules/MathExpStringEvalModule.html":{},"injectables/MathExpStringEvalService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["result.ts",{"_index":57,"title":{},"body":{"classes/FunctionResult.html":{},"coverage.html":{}}}],["result.ts:13",{"_index":68,"title":{},"body":{"classes/FunctionResult.html":{}}}],["result.ts:15",{"_index":71,"title":{},"body":{"classes/FunctionResult.html":{}}}],["result.ts:18",{"_index":75,"title":{},"body":{"classes/FunctionResult.html":{}}}],["result.ts:22",{"_index":73,"title":{},"body":{"classes/FunctionResult.html":{}}}],["result.ts:25",{"_index":77,"title":{},"body":{"classes/FunctionResult.html":{}}}],["result.ts:8",{"_index":65,"title":{},"body":{"classes/FunctionResult.html":{}}}],["resultant",{"_index":155,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["results",{"_index":54,"title":{},"body":{"classes/DMEToken.html":{},"classes/FunctionResult.html":{},"components/MathExpStringEvalComponent.html":{},"modules/MathExpStringEvalModule.html":{},"injectables/MathExpStringEvalService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":48,"title":{},"body":{"classes/DMEToken.html":{},"classes/FunctionResult.html":{},"injectables/MathExpStringEvalService.html":{},"index.html":{}}}],["returns",{"_index":39,"title":{},"body":{"classes/DMEToken.html":{},"classes/FunctionResult.html":{},"components/MathExpStringEvalComponent.html":{},"injectables/MathExpStringEvalService.html":{}}}],["right",{"_index":283,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["rights",{"_index":497,"title":{},"body":{"license.html":{}}}],["root",{"_index":238,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"index.html":{}}}],["run",{"_index":462,"title":{},"body":{"index.html":{}}}],["running",{"_index":382,"title":{},"body":{"index.html":{}}}],["sample",{"_index":343,"title":{},"body":{"index.html":{}}}],["second",{"_index":164,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"index.html":{}}}],["section",{"_index":400,"title":{},"body":{"index.html":{}}}],["see",{"_index":23,"title":{},"body":{"classes/DMEToken.html":{},"miscellaneous/variables.html":{}}}],["selector",{"_index":92,"title":{},"body":{"components/MathExpStringEvalComponent.html":{},"index.html":{}}}],["sell",{"_index":504,"title":{},"body":{"license.html":{}}}],["ser",{"_index":458,"title":{},"body":{"index.html":{}}}],["serve",{"_index":463,"title":{},"body":{"index.html":{}}}],["service",{"_index":334,"title":{},"body":{"index.html":{}}}],["set",{"_index":51,"title":{},"body":{"classes/DMEToken.html":{},"classes/FunctionResult.html":{}}}],["setendindex(endindex",{"_index":72,"title":{},"body":{"classes/FunctionResult.html":{}}}],["setresult(result",{"_index":76,"title":{},"body":{"classes/FunctionResult.html":{}}}],["settype(type",{"_index":34,"title":{},"body":{"classes/DMEToken.html":{}}}],["setvalue(value",{"_index":43,"title":{},"body":{"classes/DMEToken.html":{}}}],["seven",{"_index":420,"title":{},"body":{"index.html":{}}}],["sh",{"_index":366,"title":{},"body":{"index.html":{}}}],["shall",{"_index":512,"title":{},"body":{"license.html":{}}}],["side",{"_index":284,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["sign",{"_index":199,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["software",{"_index":490,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/DMEToken.html":{},"classes/FunctionResult.html":{},"components/MathExpStringEvalComponent.html":{},"modules/MathExpStringEvalModule.html":{},"injectables/MathExpStringEvalService.html":{}}}],["specifies",{"_index":425,"title":{},"body":{"index.html":{}}}],["src/.../registry.ts",{"_index":545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../token",{"_index":317,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/lib/dmetoken.ts",{"_index":6,"title":{},"body":{"classes/DMEToken.html":{},"coverage.html":{}}}],["src/lib/dmetoken.ts:10",{"_index":21,"title":{},"body":{"classes/DMEToken.html":{}}}],["src/lib/dmetoken.ts:15",{"_index":25,"title":{},"body":{"classes/DMEToken.html":{}}}],["src/lib/dmetoken.ts:17",{"_index":33,"title":{},"body":{"classes/DMEToken.html":{}}}],["src/lib/dmetoken.ts:20",{"_index":42,"title":{},"body":{"classes/DMEToken.html":{}}}],["src/lib/dmetoken.ts:24",{"_index":35,"title":{},"body":{"classes/DMEToken.html":{}}}],["src/lib/dmetoken.ts:27",{"_index":44,"title":{},"body":{"classes/DMEToken.html":{}}}],["src/lib/function",{"_index":56,"title":{},"body":{"classes/FunctionResult.html":{},"coverage.html":{}}}],["src/lib/math",{"_index":85,"title":{},"body":{"components/MathExpStringEvalComponent.html":{},"modules/MathExpStringEvalModule.html":{},"injectables/MathExpStringEvalService.html":{},"coverage.html":{}}}],["src/lib/registry.ts",{"_index":307,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/token",{"_index":319,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["started",{"_index":329,"title":{"index.html":{},"license.html":{}},"body":{}}],["startindex",{"_index":171,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["starting",{"_index":208,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["statement",{"_index":367,"title":{},"body":{"index.html":{}}}],["statements",{"_index":301,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["string",{"_index":87,"title":{},"body":{"components/MathExpStringEvalComponent.html":{},"modules/MathExpStringEvalModule.html":{},"injectables/MathExpStringEvalService.html":{},"coverage.html":{},"index.html":{}}}],["styles",{"_index":103,"title":{},"body":{"components/MathExpStringEvalComponent.html":{}}}],["styleurls",{"_index":455,"title":{},"body":{"index.html":{}}}],["sub",{"_index":188,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["subject",{"_index":509,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":502,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":513,"title":{},"body":{"license.html":{}}}],["succeeding",{"_index":197,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["support",{"_index":540,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":541,"title":{},"body":{"modules.html":{}}}],["table",{"_index":224,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":310,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":430,"title":{},"body":{"index.html":{}}}],["template",{"_index":102,"title":{},"body":{"components/MathExpStringEvalComponent.html":{}}}],["templateurl",{"_index":453,"title":{},"body":{"index.html":{}}}],["this._endindex",{"_index":78,"title":{},"body":{"classes/FunctionResult.html":{}}}],["this._result",{"_index":79,"title":{},"body":{"classes/FunctionResult.html":{}}}],["this._type",{"_index":49,"title":{},"body":{"classes/DMEToken.html":{}}}],["this._value",{"_index":50,"title":{},"body":{"classes/DMEToken.html":{}}}],["this.evalautetokenizedexp(this.tokenizestringexp(exp",{"_index":247,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["this.evaluatefunctiontokens(tokens",{"_index":257,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["this.evaluatenativeexpression(tokens",{"_index":262,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["this.evaluateunaryoperations(tokens",{"_index":256,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["this.normalizenegativeoperands(tokens",{"_index":260,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["through",{"_index":378,"title":{},"body":{"index.html":{}}}],["throw",{"_index":249,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["token",{"_index":9,"title":{},"body":{"classes/DMEToken.html":{},"injectables/MathExpStringEvalService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["tokenized",{"_index":152,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"index.html":{}}}],["tokenizestringexp",{"_index":145,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["tokenizestringexp(exp",{"_index":214,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["tokenizing",{"_index":407,"title":{},"body":{"index.html":{}}}],["tokens",{"_index":28,"title":{},"body":{"classes/DMEToken.html":{},"injectables/MathExpStringEvalService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["tokens.length==0",{"_index":253,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["tokens==null",{"_index":252,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["tokentype",{"_index":19,"title":{},"body":{"classes/DMEToken.html":{},"injectables/MathExpStringEvalService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["tool",{"_index":360,"title":{},"body":{"index.html":{}}}],["tort",{"_index":535,"title":{},"body":{"license.html":{}}}],["transition",{"_index":220,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"miscellaneous/variables.html":{}}}],["transitioncheck",{"_index":146,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["transitioncheck(pre",{"_index":216,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["transitiontable",{"_index":235,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["transitiontable.length",{"_index":273,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["transitiontable[pre",{"_index":274,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["transtion",{"_index":572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tree",{"_index":84,"title":{},"body":{"components/MathExpStringEvalComponent.html":{}}}],["true",{"_index":228,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["try",{"_index":246,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["type",{"_index":16,"title":{},"body":{"classes/DMEToken.html":{},"classes/FunctionResult.html":{},"injectables/MathExpStringEvalService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":46,"title":{},"body":{"classes/DMEToken.html":{},"injectables/MathExpStringEvalService.html":{}}}],["type.enum.ts",{"_index":318,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["types",{"_index":421,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":368,"title":{},"body":{"index.html":{}}}],["unary",{"_index":254,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"index.html":{}}}],["unique",{"_index":418,"title":{},"body":{"index.html":{}}}],["up",{"_index":472,"title":{},"body":{"index.html":{}}}],["usage",{"_index":435,"title":{},"body":{"index.html":{}}}],["use",{"_index":336,"title":{},"body":{"index.html":{},"license.html":{}}}],["used",{"_index":426,"title":{},"body":{"index.html":{}}}],["useful",{"_index":361,"title":{},"body":{"index.html":{}}}],["user",{"_index":175,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["using",{"_index":223,"title":{},"body":{"injectables/MathExpStringEvalService.html":{},"index.html":{}}}],["usually",{"_index":438,"title":{},"body":{"index.html":{}}}],["utility",{"_index":339,"title":{},"body":{"index.html":{}}}],["valid",{"_index":229,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["validates",{"_index":219,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["validchar",{"_index":561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["value",{"_index":17,"title":{},"body":{"classes/DMEToken.html":{},"injectables/MathExpStringEvalService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":108,"title":{},"body":{"components/MathExpStringEvalComponent.html":{}}}],["variable",{"_index":308,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":544,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":341,"title":{},"body":{"index.html":{}}}],["view",{"_index":356,"title":{},"body":{"index.html":{}}}],["void",{"_index":40,"title":{},"body":{"classes/DMEToken.html":{},"classes/FunctionResult.html":{},"components/MathExpStringEvalComponent.html":{},"injectables/MathExpStringEvalService.html":{}}}],["warranties",{"_index":520,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":515,"title":{},"body":{"license.html":{}}}],["wherever",{"_index":450,"title":{},"body":{"index.html":{}}}],["whether",{"_index":532,"title":{},"body":{"license.html":{}}}],["while(!(operatorstack.length==0",{"_index":269,"title":{},"body":{"injectables/MathExpStringEvalService.html":{}}}],["whole",{"_index":410,"title":{},"body":{"index.html":{}}}],["wish",{"_index":376,"title":{},"body":{"index.html":{}}}],["within",{"_index":60,"title":{},"body":{"classes/FunctionResult.html":{},"injectables/MathExpStringEvalService.html":{},"index.html":{}}}],["without",{"_index":377,"title":{},"body":{"index.html":{},"license.html":{}}}],["z",{"_index":566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z0",{"_index":568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z_0",{"_index":563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["za",{"_index":562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoom",{"_index":123,"title":{},"body":{"modules/MathExpStringEvalModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/DMEToken.html":{"url":"classes/DMEToken.html","title":"class - DMEToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DMEToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/dmetoken.ts\n        \n\n            \n                Description\n            \n            \n                Class for representing a token. \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _type\n                            \n                            \n                                    Private\n                                _value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    type\n                                \n                                \n                                    value\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TokenType\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/dmetoken.ts:10\n                            \n                        \n\n                \n                    \n                        Indicates the type of token. See TokenType enum.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/dmetoken.ts:15\n                            \n                        \n\n                \n                    \n                        Contains the value of the token. For number tokens, the value is the numerical value. for other tokens, it is the character itself.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        type\n                    \n                \n\n                \n                    \n                        gettype()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/dmetoken.ts:17\n                                \n                            \n\n                \n                    \n                        settype(type)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/dmetoken.ts:24\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            type\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        value\n                    \n                \n\n                \n                    \n                        getvalue()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/dmetoken.ts:20\n                                \n                            \n\n                \n                    \n                        setvalue(value: any)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/dmetoken.ts:27\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            any\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { TokenType } from './token-type.enum';\n\n/**\n * Class for representing a token. \n */\nexport class DMEToken {\n    /**\n     * Indicates the type of token. See TokenType enum.\n     */\n    private _type : TokenType;\n    \n    /**\n     * Contains the value of the token. For number tokens, the value is the numerical value. for other tokens, it is the character itself.\n     */\n    private _value : any;\n\n    get type() : TokenType {\n      return this._type;\n    }\n    get value() : any {\n      return this._value;\n    }\n\n    set type( type : TokenType ) {\n      this._type = type;\n    }\n    set value( value : any ) {\n      this._value = value;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FunctionResult.html":{"url":"classes/FunctionResult.html","title":"class - FunctionResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FunctionResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/function-result.ts\n        \n\n            \n                Description\n            \n            \n                Class representing the result from evaluation of a function within the expression.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _endIndex\n                            \n                            \n                                    Private\n                                _result\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    endIndex\n                                \n                                \n                                    result\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _endIndex\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/function-result.ts:8\n                            \n                        \n\n                \n                    \n                        Ending index of the function within the main expression.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _result\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/function-result.ts:13\n                            \n                        \n\n                \n                    \n                        Result after evaluating the function.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        endIndex\n                    \n                \n\n                \n                    \n                        getendIndex()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/function-result.ts:15\n                                \n                            \n\n                \n                    \n                        setendIndex(endIndex: number)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/function-result.ts:22\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            endIndex\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        result\n                    \n                \n\n                \n                    \n                        getresult()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/function-result.ts:18\n                                \n                            \n\n                \n                    \n                        setresult(result: number)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/function-result.ts:25\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            result\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        export class FunctionResult {\n    /**\n     * Ending index of the function within the main expression.\n     */\n    private _endIndex : number;\n    \n    /**\n     * Result after evaluating the function.\n     */\n    private _result : number;\n\n    get endIndex() : number {\n        return this._endIndex;\n    }\n    get result() : number {\n        return this._result;\n    }\n\n    set endIndex( endIndex : number ) {\n        this._endIndex = endIndex;\n    }\n    set result( result : number ) {\n        this._result = result;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MathExpStringEvalComponent.html":{"url":"components/MathExpStringEvalComponent.html","title":"component - MathExpStringEvalComponent","body":"\n                   \n\n\n\n\n\n  Components\n  MathExpStringEvalComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/math-exp-string-eval.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                dl-math-exp-string-eval\n            \n\n\n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/lib/math-exp-string-eval.component.ts:8\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/math-exp-string-eval.component.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'dl-math-exp-string-eval',\n  template: ``,\n  styles: []\n})\nexport class MathExpStringEvalComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'MathExpStringEvalComponent', 'selector': 'dl-math-exp-string-eval'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'MathExpStringEvalComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MathExpStringEvalModule.html":{"url":"modules/MathExpStringEvalModule.html","title":"module - MathExpStringEvalModule","body":"\n                   \n\n\n\n\n    Modules\n    MathExpStringEvalModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MathExpStringEvalModule\n\n\n\ncluster_MathExpStringEvalModule_declarations\n\n\n\ncluster_MathExpStringEvalModule_exports\n\n\n\n\nMathExpStringEvalComponent\n\nMathExpStringEvalComponent\n\n\n\nMathExpStringEvalModule\n\nMathExpStringEvalModule\n\nMathExpStringEvalModule -->\n\nMathExpStringEvalComponent->MathExpStringEvalModule\n\n\n\n\n\nMathExpStringEvalComponent \n\nMathExpStringEvalComponent \n\nMathExpStringEvalComponent  -->\n\nMathExpStringEvalModule->MathExpStringEvalComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/math-exp-string-eval.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            MathExpStringEvalComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MathExpStringEvalComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { MathExpStringEvalComponent } from './math-exp-string-eval.component';\n\n@NgModule({\n  declarations: [MathExpStringEvalComponent],\n  imports: [\n  ],\n  exports: [MathExpStringEvalComponent]\n})\nexport class MathExpStringEvalModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MathExpStringEvalService.html":{"url":"injectables/MathExpStringEvalService.html","title":"injectable - MathExpStringEvalService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MathExpStringEvalService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/math-exp-string-eval.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                evalauteTokenizedExp\n                            \n                            \n                                    Public\n                                evaluateBinaryExpression\n                            \n                            \n                                    Public\n                                evaluateExp\n                            \n                            \n                                    Private\n                                evaluateFunctionToken\n                            \n                            \n                                    Public\n                                evaluateFunctionTokens\n                            \n                            \n                                    Public\n                                evaluateNativeExpression\n                            \n                            \n                                    Public\n                                evaluateUnaryOperations\n                            \n                            \n                                    Private\n                                normalizeNegativeOperands\n                            \n                            \n                                    Private\n                                processFunctionName\n                            \n                            \n                                    Private\n                                processNumbers\n                            \n                            \n                                    Public\n                                tokenizeStringExp\n                            \n                            \n                                    Private\n                                transitionCheck\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/lib/math-exp-string-eval.service.ts:10\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            evalauteTokenizedExp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    evalauteTokenizedExp(tokens: DMEToken[], functionDB: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/math-exp-string-eval.service.ts:42\n                \n            \n\n\n            \n                \n                    Evaluates a tokenized expression.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tokens\n                                    \n                                                DMEToken[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The tokenized expression to be evaluated, which is the token list.\n\n                                    \n                                \n                                \n                                    functionDB\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        Returns a number which indicates the resultant value of the expression.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            evaluateBinaryExpression\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    evaluateBinaryExpression(a: DMEToken, op: DMEToken, b: DMEToken)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/math-exp-string-eval.service.ts:344\n                \n            \n\n\n            \n                \n                    Evaluates a binomial expression of the type \"a  b\".\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    a\n                                    \n                                                DMEToken\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The first number token.\n\n                                    \n                                \n                                \n                                    op\n                                    \n                                                DMEToken\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The arithmetic operation.\n\n                                    \n                                \n                                \n                                    b\n                                    \n                                                DMEToken\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The second number token.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            evaluateExp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    evaluateExp(exp: string, functionDB: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/math-exp-string-eval.service.ts:19\n                \n            \n\n\n            \n                \n                    Method to evaluate a mathematical string expression.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    exp\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The string expression to be evaluated.\n\n                                    \n                                \n                                \n                                    functionDB\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        Returns a number which indicates the resultant value of the expression.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            evaluateFunctionToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    evaluateFunctionToken(tokens: DMEToken[], startIndex: number, functionDB: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/math-exp-string-eval.service.ts:413\n                \n            \n\n\n            \n                \n                    Evaluates a function token within an expression.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tokens\n                                    \n                                                DMEToken[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of tokens of the expression.\n\n                                    \n                                \n                                \n                                    startIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Index of the function name token.\n\n                                    \n                                \n                                \n                                    functionDB\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        JSON object of the list of user defined functions.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FunctionResult\n\n                    \n                    \n                        Returns a FunctionResult object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            evaluateFunctionTokens\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    evaluateFunctionTokens(tokens: DMEToken[], functionDB: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/math-exp-string-eval.service.ts:375\n                \n            \n\n\n            \n                \n                    Method to evaluate all function tokens in an expression to numerical tokens.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tokens\n                                    \n                                                DMEToken[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The list of tokens containing (or not containing) functions.\n\n                                    \n                                \n                                \n                                    functionDB\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing function declarations.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DMEToken[]\n\n                    \n                    \n                        Returns the original list of tokens but with results from the function calls.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            evaluateNativeExpression\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    evaluateNativeExpression(tokens: DMEToken[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/math-exp-string-eval.service.ts:71\n                \n            \n\n\n            \n                \n                    Evaluates a tokenized native expression which is an expression that contains no more function tokens.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tokens\n                                    \n                                                DMEToken[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of tokens of the expression.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        Returns a number which is the result of the evaluation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            evaluateUnaryOperations\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    evaluateUnaryOperations(tokens: DMEToken[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/math-exp-string-eval.service.ts:305\n                \n            \n\n\n            \n                \n                    Evaluates any sub-string or sub-expression within parenthesis which is a negation operation\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tokens\n                                    \n                                                DMEToken[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The tokens already generated from the string expression.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DMEToken[]\n\n                    \n                    \n                        Returns the evaluated expression.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            normalizeNegativeOperands\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    normalizeNegativeOperands(tokens: DMEToken[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/math-exp-string-eval.service.ts:531\n                \n            \n\n\n            \n                \n                    Converts all ooperands succeeding a minus sign to negative numbers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tokens\n                                    \n                                                DMEToken[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The list of tokens generated from the expression.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            processFunctionName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processFunctionName(exp: string[], index: number, tokens: DMEToken[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/math-exp-string-eval.service.ts:287\n                \n            \n\n\n            \n                \n                    Generates a token representing a function name and pushes it to list of tokens and returns \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    exp\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The array of characters of the expression.\n\n                                    \n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The index of the starting character for the function name in the string\n\n                                    \n                                \n                                \n                                    tokens\n                                    \n                                                DMEToken[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The list of tokens already generated prior to the number token.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        Returns the index of the last character of the function name in the string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            processNumbers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processNumbers(exp: string[], index: number, tokens: DMEToken[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/math-exp-string-eval.service.ts:246\n                \n            \n\n\n            \n                \n                    Generates a token representing a number and pushes it to list of tokens and returns \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    exp\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The array of characters of the expression.\n\n                                    \n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The index of the starting character for the number in the string\n\n                                    \n                                \n                                \n                                    tokens\n                                    \n                                                DMEToken[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The list of tokens already generated prior to the number token.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        Returns the index of the last character (or digit) of the number in the string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            tokenizeStringExp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    tokenizeStringExp(exp: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/math-exp-string-eval.service.ts:133\n                \n            \n\n\n            \n                \n                    Generates an array of tokens from the string expression.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    exp\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The string expression.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DMEToken[]\n\n                    \n                    \n                        Returns a list (an array) of the generated tokens.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            transitionCheck\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    transitionCheck(pre: number, current: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/math-exp-string-eval.service.ts:223\n                \n            \n\n\n            \n                \n                    Validates transition from one character to another using the transition table.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pre\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The type of the previous character.\n\n                                    \n                                \n                                \n                                    current\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The type of the current character.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Returns true if the transition is valid and false otherwise.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { DMEToken } from './dmetoken';\nimport { IndexTable, OperatorPrecedence, Regex, TransitionTable } from './registry';\nimport { TokenType } from './token-type.enum';\nimport { FunctionResult } from './function-result';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MathExpStringEvalService {\n\n  constructor() { }\n\n  /**\n   * Method to evaluate a mathematical string expression.\n   * @param exp The string expression to be evaluated.\n   * @returns Returns a number which indicates the resultant value of the expression.\n   */\n  public evaluateExp( exp : string, functionDB : any ) : number {\n    let result : number = 0;\n    \n    // Check if string is null\n    if( exp==null || exp==undefined || exp.length==0 ) {\n      return null;\n    }\n    \n    try {\n      result = this.evalauteTokenizedExp(this.tokenizeStringExp(exp), functionDB);\n    }\n    catch(e) {\n      throw e;\n    }\n\n    return result;\n  }\n\n  /**\n   * Evaluates a tokenized expression.\n   * @param tokens The tokenized expression to be evaluated, which is the token list.\n   * @returns Returns a number which indicates the resultant value of the expression.\n   */\n  public evalauteTokenizedExp( tokens : DMEToken[], functionDB : any ) : number {\n    if(tokens==undefined || tokens==null || tokens.length==0){\n      return null;\n    }\n\n    let result : number;\n    try {\n      // Evaluating unary operations\n      tokens = this.evaluateUnaryOperations(tokens);\n      // Evaluating all function tokens\n      tokens = this.evaluateFunctionTokens(tokens, functionDB);\n      // Evaluating all unary operations\n      tokens = this.evaluateUnaryOperations(tokens);\n      // Normalizing numbers following minus sign\n      this.normalizeNegativeOperands(tokens);\n      // Evaluating the obtained native expression\n      result = this.evaluateNativeExpression(tokens);\n    }\n    catch(e) {\n      throw e;\n    }\n    return result;\n  }\n\n  /**\n   * Evaluates a tokenized native expression which is an expression that contains no more function tokens.\n   * @param tokens List of tokens of the expression.\n   * @returns Returns a number which is the result of the evaluation.\n   */\n  public evaluateNativeExpression( tokens : DMEToken[] ) : number {\n    let operandStack : DMEToken[] = [], operatorStack : DMEToken[] = [];\n    try{\n      for( let i:number=0; i= OperatorPrecedence[operatorStack[operatorStack.length-1].value]) {\n              operatorStack.push(tokens[i]);\n            }\n            else {\n              while(!(operatorStack.length==0) && OperatorPrecedence[tokens[i].value] ();\n    }\n\n    let result : DMEToken[] = [];\n\n    let array : string[] = exp.split('');\n    let pre : number = -1, current : number = 0;\n    for( let i:number=0; i TransitionTable.length || current  TransitionTable.length) {\n      return false;\n    }\n    let table : number[] = TransitionTable[pre];\n    for( let i:number=0; i=exp.length || !exp[index].match(Regex.num)) {\n        throw new Error('Error: Invalid expression. No digit after decimal point. Index: ' + index);\n      }\n\n      // Parsing right side of decimal point\n      for(; index b\".\n   * @param a The first number token.\n   * @param op The arithmetic operation.\n   * @param b The second number token.\n   */\n  public evaluateBinaryExpression( a : DMEToken, op : DMEToken, b :DMEToken) : number {\n    let result : number = 0;\n    if(a.type==TokenType.Operand && op.type==TokenType.Operator && b.type==TokenType.Operand) {\n      if(op.value==\"+\") {\n        result = a.value + b.value;\n      }\n      else if(op.value==\"-\") {\n        result = a.value - b.value;\n      }\n      else if(op.value==\"*\") {\n        result = a.value * b.value;\n      }\n      else if(op.value==\"/\") {\n        if(b.value==0) {\n          throw new Error('Error: Divides by 0 exception.');\n        }\n        result = a.value / b.value;\n      }\n    }\n    else {\n      throw new Error('Error: Invalid binomial expression.');\n    }\n    return result;\n  }\n\n  /**\n   * Method to evaluate all function tokens in an expression to numerical tokens.\n   * @param tokens The list of tokens containing (or not containing) functions.\n   * @param functionDB Object containing function declarations.\n   * @returns Returns the original list of tokens but with results from the function calls.\n   */\n  public evaluateFunctionTokens( tokens : DMEToken[], functionDB : any ) : DMEToken[] {\n    let result : DMEToken[] = [];\n    let i : number = 0;\n    try {\n      for(i=0; i = [];\n    \n    if(tokens[index].type!=TokenType.OpenParenthesis) {\n      throw new Error('Error: No opening parenthesis after function name at index ' + index);\n    }\n\n    for(++index; index\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/lib/dmetoken.ts\n            \n            class\n            DMEToken\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/function-result.ts\n            \n            class\n            FunctionResult\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/math-exp-string-eval.component.ts\n            \n            component\n            MathExpStringEvalComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/lib/math-exp-string-eval.service.ts\n            \n            injectable\n            MathExpStringEvalService\n            \n                85 %\n                (12/14)\n            \n        \n        \n            \n                \n                src/lib/registry.ts\n            \n            variable\n            IndexTable\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/registry.ts\n            \n            variable\n            OperatorPrecedence\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/registry.ts\n            \n            variable\n            Regex\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/registry.ts\n            \n            variable\n            TransitionTable\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^7.2.0\n        \n            @angular/core : ^7.2.0\n    \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            TokenType   (src/.../token-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/token-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        TokenType\n                    \n                \n                    \n                        \n                            Enum for the possible type of tokens.\n\n                        \n                    \n                        \n                            \n                                 Operator\n                            \n                        \n                        \n                            \n                                 Operand\n                            \n                        \n                        \n                            \n                                 OpenParenthesis\n                            \n                        \n                        \n                            \n                                 CloseParenthesis\n                            \n                        \n                        \n                            \n                                 DecimalPoint\n                            \n                        \n                        \n                            \n                                 FunctionName\n                            \n                        \n                        \n                            \n                                 Comma\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nMath Expression String Evaluator\nThis is an Angular library which provides a service for evaluating mathematical expressions of string type and return a number. This library does not use the eval function which is a built-in JavaScript utility.\nThis library was generated with Angular CLI version 7.2.0.\nNote: All import statements within this sample code or elaborated in this document will either include projects/math-exp-string-eval/src/public-api or d depending on how the library was installed. Refer to Installation.\nDocumentation\nTo view the documentation, open doc/index.html. The documentation was generated using Compodoc tool. Compodoc is a useful tool for generating documentation for your Angular applications.\nInstallation\nUsing NPM\nTo install the library using npm:\nsh\nnpm i dl-math-exp-string-eval\nThis installation will include the import statement:\n```typescript\n// For module import in app.modeul.ts\nimport { ExpMathStringEvalModule } from '../../node_modules/dl-math-exp-string-eval';\n// For service import in component\nimport { ExpMathStringEvalService } from '../../node_modules/dl-math-exp-string-eval';\n```\nManual\nIf you have cloned this repository and wish to use the library without installation through the Node Package Manager, then you can build the library by running:\nsh\nng build math-exp-string-eval\nThis will generate a module in dist directory by the name math-exp-string-eval.\nTo manually add the library to your application, copy directory dist/math-exp-string-eval, in this repository, to your application's dist directory. In case if your application directory does not have a dist directory then create one.\nThe import statements will include:\n```typescript\n// For module import in app.modeul.ts\nimport { ExpMathStringEvalModule } from 'math-exp-string-eval';\n// For service import in component\nimport { MathExpStringEvalService } from 'math-exp-string-eval';\n```\nLibrary Import\nIn the app.module.ts (or any module configuration) add ExpMathStringEvalModule to the imports array int @NgModule decorator. Then add the following line in the imports section of the module file:\nimport { ExpMathStringEvalModule } from  'projects/math-exp-string-eval/src/public-api'; This is for the case when the library is present within the projects directory. In case if the library is within node_modules, then make the changes accrodingly.\nDescription\nThe library evaluates a string expression through:\n\nTokenizing - A token can be a number, an operator, opening or closing parenthesis or a function name.\nEvaluating unary operations - Expression of the type (-n) where n is a whole number are evaluated next.\nEvaluating functions - Functions can be included in the expression and they are evaluated next.\nEvaluating final native expression - A native expression is one where there are no functions or unary operations existing within the expression.\n\nToken\nA token represents an independent entity of the expression which has a unique purpose within the expression. There are seven types of tokens: Operator, Operand, OpenParenthesis, CloseParenthesis, DecimalPoint, FunctionName and Comma. Of these only DecimalPoint and Comma will not be tokenized into individual tokens. A token is represented by the DMEToken class which has the following:\n| Field | Type | Description |\n|--|--|--|\n| type | enum - TokenType | Specifies the type of token from the TokenType enum. |\n| value | any | The value of the token, for a number the value is the value of the number. |\nFunction\nA function can be used within an expression provided it is defined within an object of type any and passed in the second paremeter of the evaluating methods. A function takes the form f1.f2...fn(param1, param2,..., paramN).\nUsage\n1. Configuring App Module\nImport the module into app.module.ts. If the library is in dist directory then use:\ntypescript\nimport { ExpMathStringEvalModule } from 'math-exp-string-eval'\nBut if the library is within node_modules, installed using npm then use:\ntypescript\nimport { ExpMathStringEvalModule } from '../../node_modules/dl-math-exp-string-eval'\nAdd ExpMathStringEvalModule to the imports array in the @NgModule decorator of the application module file (usually named app.module.ts inside app component directory). A sample @NgModule decorator should look like this:\ntypescript\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    ExpMathStringEvalModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nOnce app.module.ts is configured, the service can now be injected into your components.\n2. Service Injection\nTo use the service within a component (or wherever necessary), the service has to be injected into that component. A sample code for injecting the service into the app component:\n```typescript\n\nimport { ExpMathStringEvalService } from 'math-exp-string-eval';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nconstructor(private ser : ExpMathStringEvalService) { }\n```\nThe above code injects the service into the constructor of the app component.\nDemo\nRun ng serve in this application and open the developer console to view the results.\nThe demo code is present within app.component.ts. This application takes an expression in a string and the service is injected in the constructor in app.component.ts. There is an object which contains functions which are passed into the second argument of the evaluator method. Finally, there is invocation of the Math.sin method which is not defined in the list function, this is to demonstrate the look up which the service performs on the Math object of JS's library.\nTo run the demo, first build the library:\nsh\nng build math-exp-string-eval\nand then run the application using Angular CLI's tool:\nsh\nng serve\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2019 Dame Lyngdoh\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        MathExpStringEvalModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MathExpStringEvalModule\n\n\n\ncluster_MathExpStringEvalModule_declarations\n\n\n\ncluster_MathExpStringEvalModule_exports\n\n\n\n\nMathExpStringEvalComponent\n\nMathExpStringEvalComponent\n\n\n\nMathExpStringEvalModule\n\nMathExpStringEvalModule\n\nMathExpStringEvalModule -->\n\nMathExpStringEvalComponent->MathExpStringEvalModule\n\n\n\n\n\nMathExpStringEvalComponent \n\nMathExpStringEvalComponent \n\nMathExpStringEvalComponent  -->\n\nMathExpStringEvalModule->MathExpStringEvalComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            IndexTable   (src/.../registry.ts)\n                        \n                        \n                            OperatorPrecedence   (src/.../registry.ts)\n                        \n                        \n                            Regex   (src/.../registry.ts)\n                        \n                        \n                            TransitionTable   (src/.../registry.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/registry.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            IndexTable\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    \"0\": 0,\n    \"1\": 0,\n    \"2\": 0,\n    \"3\": 0,\n    \"4\": 0,\n    \"5\": 0,\n    \"6\": 0,\n    \"7\": 0,\n    \"8\": 0,\n    \"9\": 0,\n    \"+\": 1,\n    \"*\": 1,\n    \"/\": 1,\n    \"-\": 2,\n    \"(\": 3,\n    \")\": 4,\n    \".\": 5,\n    \",\": 7\n  }\n                        \n                    \n\n                \n                    \n                        Index table of characters. The value to the keys indicate the index for the transition table of the character.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            OperatorPrecedence\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    \"(\": -1,\n    \"-\": 0,\n    \"+\": 1,\n    \"*\": 2,\n    \"/\": 3\n  }\n                        \n                    \n\n                \n                    \n                        Operator precedence, where the keys of the object represent the operators. The greater the value, the higher the precedence.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Regex\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    validChar: /[a-zA-Z_0-9+-/*(),]/,\n    num: /[0-9]/,\n    op: /[+-/*]/,\n    parenthesis: /[()]/,\n    OpenParenthesis: /[(]/,\n    closeParenthesis: /[)]/,\n    decimalPoint: /[.]/,\n    functionNameStart: /[a-zA-Z]/,\n    funtionName: /[a-zA-Z0-9_.]/\n  }\n                        \n                    \n\n                \n                    \n                        List of regular expressions for different token types.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TransitionTable\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    [0, 1, 2, 4, 5, 7],\n    [0, 3, 6],\n    [0, 3, 6],\n    [0, 2, 3],\n    [1, 2, 4, 7],\n    [0],\n    [3],\n    [0, 3, 6]\n  ]\n                        \n                    \n\n                \n                    \n                        Transtion table of characters. The index represents the character (see Index table) and the array in an index represents the characters which are legal after the character in the index.\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
